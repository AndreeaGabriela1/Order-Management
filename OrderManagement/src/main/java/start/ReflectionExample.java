package start;import java.lang.reflect.Field;public class ReflectionExample {    public static String[] addElement(String[] array, String element) {        String[] newArray = new String[array.length + 1];        System.arraycopy(array, 0, newArray, 0, array.length);        newArray[array.length] = element;        return newArray;    }    public static Object[] addElement2(Object[] array, String element) {        Object[] newArray = new Object[array.length + 1];        System.arraycopy(array, 0, newArray, 0, array.length);        newArray[array.length] = element;        return newArray;    }    public static int getNrFields(Object object) {        Field[] fields = object.getClass().getDeclaredFields();        return fields.length;    }    public static String[] retrieveProperties(Object object) {        Field[] fields = object.getClass().getDeclaredFields();        String[] columnNames = new String[fields.length];        for (int i = 0; i < fields.length; i++) {            fields[i].setAccessible(true);            columnNames[i] = fields[i].getName();        }        return columnNames;    }    public Object[] getRows(Object object) {        Field[] fields = object.getClass().getDeclaredFields();        Object[] rowData = new Object[fields.length];        for (int i = 0; i < fields.length; i++) {            fields[i].setAccessible(true);            try {                rowData[i] = fields[i].get(object);            } catch (IllegalAccessException e) {                throw new RuntimeException(e);            }        }        return rowData;    }}
package dao;import connection.ConnectionFactory;import model.Product;import start.ReflectionExample;import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.sql.*;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;public class ProductDAO implements GenericDAO<Product> {    protected static final Logger LOGGER = Logger.getLogger(ProductDAO.class.getName());    private static final String INSERT_STATEMENT = "INSERT INTO product (id, name, price, currentStock) VALUES (?, ?, ?, ?)";    private static final String FIND_STATEMENT = "SELECT * FROM product WHERE id = ?";    private static final String UPDATE_STATEMENT = "UPDATE product SET name = ?, price = ?, currentStock = ? WHERE id = ?";    private static final String DELETE_STATEMENT = "DELETE FROM product WHERE id = ?";    private static final String SELECT_ALL_STATEMENT = "SELECT * FROM product";    @Override    public Product findById(int id) {        Product product = null;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(FIND_STATEMENT)) {            statement.setInt(1, id);            ResultSet resultSet = statement.executeQuery();            if (resultSet.next()) {                String name = resultSet.getString("name");                double price = resultSet.getDouble("price");                int currentStock = resultSet.getInt("currentStock");                product = new Product(id, name, price, currentStock);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "ProductDAO:findById: " + e.getMessage());        }        return product;    }    @Override    public int insert(Product product, int value) {        int insertedId = -1;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(INSERT_STATEMENT, Statement.RETURN_GENERATED_KEYS)) {            statement.setInt(1, product.getId());            statement.setString(2, product.getName());            statement.setDouble(3, product.getPrice());            statement.setInt(4, product.getCurrentStock());            statement.executeUpdate();            ResultSet resultSet = statement.getGeneratedKeys();            if (resultSet.next()) {                insertedId = resultSet.getInt(1);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "ProductDAO:insert " + e.getMessage());        }        return insertedId;    }    @Override    public Product updateCustomerById(int id, String s1, String s2, String s3, String s4) {        // This method is not implemented for the ProductDAO        return null;    }    @Override    public Product updateProductById(int id, String name, Double price, int currentStock) {        Product updatedProduct = null;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(UPDATE_STATEMENT, Statement.RETURN_GENERATED_KEYS)) {            statement.setString(1, name);            statement.setDouble(2, price);            statement.setInt(3, currentStock);            statement.setInt(4, id);            statement.executeUpdate();            updatedProduct = new Product(id, name, price, currentStock);        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "ProductDAO:updateProductById " + e.getMessage());        }        return updatedProduct;    }    @Override    public int delete(int id) {        int deletedId = -1;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(DELETE_STATEMENT, Statement.RETURN_GENERATED_KEYS)) {            statement.setInt(1, id);            statement.executeUpdate();            ResultSet resultSet = statement.getGeneratedKeys();            if (resultSet.next()) {                deletedId = resultSet.getInt(1);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "ProductDAO:delete " + e.getMessage());        }        return deletedId;    }    @Override    public ArrayList<Product> viewAll() {        ArrayList<Product> products = new ArrayList<>();        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(SELECT_ALL_STATEMENT);             ResultSet resultSet = statement.executeQuery()) {            while (resultSet.next()) {                int id = resultSet.getInt("id");                String name = resultSet.getString("name");                double price = resultSet.getDouble("price");                int currentStock = resultSet.getInt("currentStock");                Product product = new Product(id, name, price, currentStock);                products.add(product);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "ProductDAO:viewAll: " + e.getMessage());        }        return products;    }    @Override    public JTable viewAll2(ArrayList<?> objects) {        ReflectionExample reflectionExample = new ReflectionExample();        String[] columnNames = reflectionExample.retrieveProperties(objects.get(0));        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);        for (Object object : objects) {            Object[] rowData = reflectionExample.getRows(object);            tableModel.addRow(rowData);        }        return new JTable(tableModel);    }}
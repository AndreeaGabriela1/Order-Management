package dao;import connection.ConnectionFactory;import model.Order;import start.ReflectionExample;import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.sql.*;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;public class OrderDAO implements GenericDAO<Order> {    protected static final Logger LOGGER = Logger.getLogger(OrderDAO.class.getName());    private static final String INSERT_STATEMENT = "INSERT INTO schooldb.order (id, clientId, productId, quantity, price) VALUES (?, ?, ?, ?, ?)";    private static final String FIND_STATEMENT = "SELECT * FROM schooldb.order WHERE id = ?";    private static final String SELECT_ALL_STATEMENT = "SELECT * FROM schooldb.order";    private static final String DELETE_STATEMENT = "DELETE FROM schooldb.order WHERE clientId = ?";    private static final String UPDATE_STATEMENT = "UPDATE schooldb.order SET clientId = ?, productId = ?, quantity = ?, price = ? WHERE id = ?";    @Override    public Order findById(int id) {        Order order = null;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(FIND_STATEMENT)) {            statement.setInt(1, id);            ResultSet resultSet = statement.executeQuery();            if (resultSet.next()) {                int clientId = resultSet.getInt("clientId");                int productId = resultSet.getInt("productId");                int quantity = resultSet.getInt("quantity");                double price = resultSet.getDouble("price");                order = new Order(id, clientId, productId, quantity, price);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "OrderDAO:findById: " + e.getMessage());        }        return order;    }    @Override    public int insert(Order order, int value) {        int insertedId = -1;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(INSERT_STATEMENT, Statement.RETURN_GENERATED_KEYS)) {            statement.setInt(1, order.getId());            statement.setInt(2, order.getClientId());            statement.setInt(3, order.getProductId());            statement.setInt(4, order.getQuantity());            statement.setDouble(5, order.getPrice());            statement.executeUpdate();            ResultSet resultSet = statement.getGeneratedKeys();            if (resultSet.next()) {                insertedId = resultSet.getInt(1);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "OrderDAO:insert " + e.getMessage());        }        return insertedId;    }    @Override    public Order updateCustomerById(int id, String s1, String s2, String s3, String s4) {        // This method is not implemented for the OrderDAO        return null;    }    @Override    public Order updateProductById(int id, String s1, Double s2, int stock) {        // This method is not implemented for the OrderDAO        return null;    }    @Override    public int delete(int id) {        int deletedId = -1;        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(DELETE_STATEMENT, Statement.RETURN_GENERATED_KEYS)) {            statement.setInt(1, id);            statement.executeUpdate();            ResultSet resultSet = statement.getGeneratedKeys();            if (resultSet.next()) {                deletedId = resultSet.getInt(1);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "OrderDAO:delete " + e.getMessage());        }        return deletedId;    }    @Override    public ArrayList<Order> viewAll() {        ArrayList<Order> orders = new ArrayList<>();        try (Connection connection = ConnectionFactory.getConnection();             PreparedStatement statement = connection.prepareStatement(SELECT_ALL_STATEMENT);             ResultSet resultSet = statement.executeQuery()) {            while (resultSet.next()) {                int id = resultSet.getInt("id");                int clientId = resultSet.getInt("clientId");                int productId = resultSet.getInt("productId");                int quantity = resultSet.getInt("quantity");                double price = resultSet.getDouble("price");                Order order = new Order(id, clientId, productId, quantity, price);                orders.add(order);            }        } catch (SQLException e) {            LOGGER.log(Level.WARNING, "OrderDAO:viewAll: " + e.getMessage());        }        return orders;    }    @Override    public JTable viewAll2(ArrayList<?> objects) {        ReflectionExample reflectionExample = new ReflectionExample();        String[] columnNames = reflectionExample.retrieveProperties(objects.get(0));        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);        for (Object object : objects) {            Object[] rowData = reflectionExample.getRows(object);            tableModel.addRow(rowData);        }        return new JTable(tableModel);    }}